!function(){"use strict";angular.module("ngMoment",["ngMoment/Services","ngMoment/Filters","ngMoment/Directives"])}();
!function(n){"use strict";var o;n.hasOwnProperty("moment")&&(o=angular.copy(n.moment),(o().hasOwnProperty("format")||n.hasOwnProperty("moment"))&&(n.moment=void 0)),angular.module("ngMoment/Service",[]).factory("$moment",[function(){return o}])}(window);
!function(){"use strict";angular.module("ngMoment/Filter/add",[]).filter("momentAdd",["$moment",function(n){var t=n.isMoment;return function(n,e,r){return t(n)?(e||(e="days"),r||(r=1),n.add(r,e)):n}}])}();
!function(){"use strict";angular.module("ngMoment/Directives",[])}();
!function(){"use strict";angular.module("ngMoment/Filters",["ngMoment/Filter/fromNow","ngMoment/Filter/add","ngMoment/Filter/subtract","ngMoment/Filter/format","ngMoment/Filter/moment"])}();
!function(){"use strict";angular.module("ngMoment/Filter/format",[]).filter("momentFormat",["$moment",function(t){var n=t.isMoment;return function(o,r){return o?(r||(r=""),!n(o)&&t(o).isValid()?t(o).format(r):n(o)?o.format(r):void 0):""}}])}();
!function(){"use strict";angular.module("ngMoment/Filter/fromNow",[]).filter("momentFromNow",["$moment",function(o){var n=o.isMoment;return function(r){return n(r)&&r.isValid()?r.fromNow():!n(r)&&o(r).isValid()?(r=o(r),r.fromNow()):void 0}}])}();
!function(){"use strict";angular.module("ngMoment/Filter/moment",[]).filter("moment",["$moment",function(n){var t=n.isMoment;return function(r,e){e||(e="");var i=n(r,e).isValid();if(!t(r)&&!i)return r;var m=n(r,e);return i?m:r}}])}();
!function(){"use strict";angular.module("ngMoment/Services",["ngMoment/Service"])}();
!function(){"use strict";angular.module("ngMoment/Filter/subtract",[]).filter("momentSubtract",["$moment",function(t){var n=t.isMoment;return function(t,r,u){return n(t)?(r||(r="days"),u||(u=1),t.subtract(u,r)):t}}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImNvbXBvbmVudHMvTW9tZW50LVNlcnZpY2UuanMiLCJjb21wb25lbnRzL2FkZC1GaWx0ZXIuanMiLCJjb21wb25lbnRzL2RpcmVjdGl2ZXMuanMiLCJjb21wb25lbnRzL2ZpbHRlcnMuanMiLCJjb21wb25lbnRzL2Zvcm1hdC1GaWx0ZXIuanMiLCJjb21wb25lbnRzL2Zyb21Ob3ctRmlsdGVyLmpzIiwiY29tcG9uZW50cy9tb21lbnQtRmlsdGVyLmpzIiwiY29tcG9uZW50cy9zZXJ2aWNlcy5qcyIsImNvbXBvbmVudHMvc3VidHJhY3QtRmlsdGVyLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJ3aW5kb3ciLCIkbW9tZW50IiwiaGFzT3duUHJvcGVydHkiLCJjb3B5IiwibW9tZW50IiwidW5kZWZpbmVkIiwiZmFjdG9yeSIsImZpbHRlciIsImlzTW9tZW50IiwiaW5wdXQiLCJ0eXBlIiwidGltZXMiLCJhZGQiLCJmb3JtYXQiLCJpc1ZhbGlkIiwiZnJvbU5vdyIsIm5ld0lucHV0Iiwic3VidHJhY3QiXSwibWFwcGluZ3MiOiJDQUFBLFdBQ0MsWUFFQUEsU0FDRUMsT0FBTyxZQUNQLG9CQUNBLG1CQUNBO0NDUEgsU0FBV0MsR0FDVCxZQUVELElBQUlDLEVBRURELEdBQU9FLGVBQWUsWUFDeEJELEVBQVVILFFBQVFLLEtBQUtILEVBQU9JLFNBRTNCSCxJQUFVQyxlQUFlLFdBQWFGLEVBQU9FLGVBQWUsYUFDOURGLEVBQU9JLE9BQVNDLFNBSWpCUCxRQUNHQyxPQUFPLHVCQUVQTyxRQUFRLFdBQVksV0FDbkIsTUFBT0wsT0FFVkQ7Q0NuQkgsV0FDQyxZQUVBRixTQUNFQyxPQUFPLDBCQUVQUSxPQUFPLGFBQWMsVUFBVyxTQUFVTixHQUMxQyxHQUFJTyxHQUFXUCxFQUFRTyxRQUV2QixPQUFPLFVBQVVDLEVBQU9DLEVBQU1DLEdBQzdCLE1BQUlILEdBQVNDLElBQ1RDLElBQVFBLEVBQU8sUUFDZkMsSUFBU0EsRUFBUSxHQUVkRixFQUFNRyxJQUFJRCxFQUFPRCxJQUpNRDtDQ1ZsQyxXQUNDLFlBRUFYLFNBQ0VDLE9BQU87Q0NKVixXQUNDLFlBRUFELFNBQ0VDLE9BQU8sb0JBQ1AsMEJBQ0Esc0JBQ0EsMkJBQ0EseUJBQ0E7Q0NUSCxXQUNDLFlBRUFELFNBQ0VDLE9BQU8sNkJBRVBRLE9BQU8sZ0JBQWlCLFVBQVcsU0FBVU4sR0FDN0MsR0FBSU8sR0FBV1AsRUFBUU8sUUFFdkIsT0FBTyxVQUFVQyxFQUFPSSxHQUN2QixNQUFJSixJQUVBSSxJQUFRQSxFQUFTLEtBR2pCTCxFQUFTQyxJQUFVUixFQUFRUSxHQUFPSyxVQUM5QmIsRUFBUVEsR0FBT0ksT0FBT0EsR0FHM0JMLEVBQVNDLEdBQ0pBLEVBQU1JLE9BQU9BLEdBRHJCLFFBVGtCO0NDVnRCLFdBQ0MsWUFFQWYsU0FDRUMsT0FBTyw4QkFFUFEsT0FBTyxpQkFBa0IsVUFBVyxTQUFVTixHQUM5QyxHQUFJTyxHQUFXUCxFQUFRTyxRQUV2QixPQUFPLFVBQVVDLEdBQ2hCLE1BQUdELEdBQVNDLElBQVVBLEVBQU1LLFVBQ3BCTCxFQUFNTSxXQUdUUCxFQUFTQyxJQUFVUixFQUFRUSxHQUFPSyxXQUN0Q0wsRUFBUVIsRUFBUVEsR0FFVEEsRUFBTU0sV0FIZDtDQ2RKLFdBQ0MsWUFFQWpCLFNBQ0VDLE9BQU8sNkJBRVBRLE9BQU8sVUFBVyxVQUFXLFNBQVVOLEdBQ3ZDLEdBQUlPLEdBQVdQLEVBQVFPLFFBRXZCLE9BQU8sVUFBVUMsRUFBT0ksR0FDbkJBLElBQVFBLEVBQVMsR0FFckIsSUFBSUMsR0FBVWIsRUFBUVEsRUFBT0ksR0FBUUMsU0FFckMsS0FBSU4sRUFBU0MsS0FBV0ssRUFBUyxNQUFPTCxFQUV4QyxJQUFJTyxHQUFXZixFQUFRUSxFQUFPSSxFQUU5QixPQUFHQyxHQUNLRSxFQUVBUDtDQ3JCWixXQUNDLFlBRUFYLFNBQ0VDLE9BQU8scUJBQ1A7Q0NMSCxXQUNDLFlBRUFELFNBQ0VDLE9BQU8sK0JBRVBRLE9BQU8sa0JBQW1CLFVBQVcsU0FBVU4sR0FDL0MsR0FBSU8sR0FBV1AsRUFBUU8sUUFFdkIsT0FBTyxVQUFVQyxFQUFPQyxFQUFNQyxHQUM3QixNQUFJSCxHQUFTQyxJQUNUQyxJQUFRQSxFQUFPLFFBQ2ZDLElBQVNBLEVBQVEsR0FNZEYsRUFBTVEsU0FBU04sRUFBT0QsSUFSQ0QiLCJmaWxlIjoibmctbW9tZW50Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnbmdNb21lbnQnLCBbXG5cdFx0XHQnbmdNb21lbnQvU2VydmljZXMnLFxuXHRcdFx0J25nTW9tZW50L0ZpbHRlcnMnLFxuXHRcdFx0J25nTW9tZW50L0RpcmVjdGl2ZXMnXG5cdFx0XSk7XG59KSgpOyIsIihmdW5jdGlvbiAod2luZG93KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuXHR2YXIgJG1vbWVudDtcblxuXHRpZih3aW5kb3cuaGFzT3duUHJvcGVydHkoJ21vbWVudCcpKSB7XG5cdFx0JG1vbWVudCA9IGFuZ3VsYXIuY29weSh3aW5kb3cubW9tZW50KTtcblxuXHRcdGlmKCRtb21lbnQoKS5oYXNPd25Qcm9wZXJ0eSgnZm9ybWF0JykgfHwgd2luZG93Lmhhc093blByb3BlcnR5KCdtb21lbnQnKSkge1xuXHRcdFx0d2luZG93Lm1vbWVudCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH0gIFxuICBcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ25nTW9tZW50L1NlcnZpY2UnLCBbXSlcbiAgICBcbiAgICAuZmFjdG9yeSgnJG1vbWVudCcsIFtmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gJG1vbWVudDtcbiAgICB9XSk7XG59KSh3aW5kb3cpO1xuIiwiKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCduZ01vbWVudC9GaWx0ZXIvYWRkJywgW10pXG5cblx0XHQuZmlsdGVyKCdtb21lbnRBZGQnLCBbJyRtb21lbnQnLCBmdW5jdGlvbiAoJG1vbWVudCkge1xuXHRcdFx0dmFyIGlzTW9tZW50ID0gJG1vbWVudC5pc01vbWVudDtcblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChpbnB1dCwgdHlwZSwgdGltZXMpIHtcblx0XHRcdFx0aWYoIWlzTW9tZW50KGlucHV0KSkgeyByZXR1cm4gaW5wdXQ7IH1cblx0XHRcdFx0aWYoIXR5cGUpIHsgdHlwZSA9ICdkYXlzJzsgfVxuXHRcdFx0XHRpZighdGltZXMpIHsgdGltZXMgPSAxOyB9XG5cblx0XHRcdFx0cmV0dXJuIGlucHV0LmFkZCh0aW1lcywgdHlwZSk7XG5cdFx0XHR9O1xuXHRcdH1dKTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCduZ01vbWVudC9EaXJlY3RpdmVzJywgW10pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ25nTW9tZW50L0ZpbHRlcnMnLCBbXG5cdFx0XHQnbmdNb21lbnQvRmlsdGVyL2Zyb21Ob3cnLFxuXHRcdFx0J25nTW9tZW50L0ZpbHRlci9hZGQnLFxuXHRcdFx0J25nTW9tZW50L0ZpbHRlci9zdWJ0cmFjdCcsXG5cdFx0XHQnbmdNb21lbnQvRmlsdGVyL2Zvcm1hdCcsXG5cdFx0XHQnbmdNb21lbnQvRmlsdGVyL21vbWVudCdcblx0XHRdKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ25nTW9tZW50L0ZpbHRlci9mb3JtYXQnLCBbXSlcblxuXHRcdC5maWx0ZXIoJ21vbWVudEZvcm1hdCcsIFsnJG1vbWVudCcsIGZ1bmN0aW9uICgkbW9tZW50KSB7XG5cdFx0XHR2YXIgaXNNb21lbnQgPSAkbW9tZW50LmlzTW9tZW50O1xuXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGlucHV0LCBmb3JtYXQpIHtcblx0XHRcdFx0aWYoIWlucHV0KSByZXR1cm4gJyc7XG5cblx0XHRcdFx0aWYoIWZvcm1hdCkgZm9ybWF0ID0gJyc7XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBub3QgYSBtb21lbnQgaW5zdGFuY2UsIG1ha2UgaXQgb25lXG5cdFx0XHRcdGlmKCFpc01vbWVudChpbnB1dCkgJiYgJG1vbWVudChpbnB1dCkuaXNWYWxpZCgpKSB7XG5cdFx0XHRcdFx0cmV0dXJuICRtb21lbnQoaW5wdXQpLmZvcm1hdChmb3JtYXQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoaXNNb21lbnQoaW5wdXQpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGlucHV0LmZvcm1hdChmb3JtYXQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1dKTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCduZ01vbWVudC9GaWx0ZXIvZnJvbU5vdycsIFtdKVxuXG5cdFx0LmZpbHRlcignbW9tZW50RnJvbU5vdycsIFsnJG1vbWVudCcsIGZ1bmN0aW9uICgkbW9tZW50KSB7XG5cdFx0XHR2YXIgaXNNb21lbnQgPSAkbW9tZW50LmlzTW9tZW50O1xuXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGlucHV0LCBmb3JtYXQpIHtcblx0XHRcdFx0aWYoaXNNb21lbnQoaW5wdXQpICYmIGlucHV0LmlzVmFsaWQoKSkge1xuXHRcdFx0XHRcdHJldHVybiBpbnB1dC5mcm9tTm93KCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIWlzTW9tZW50KGlucHV0KSAmJiAkbW9tZW50KGlucHV0KS5pc1ZhbGlkKCkpIHtcblx0XHRcdFx0XHRpbnB1dCA9ICRtb21lbnQoaW5wdXQpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGlucHV0LmZyb21Ob3coKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XSk7XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnbmdNb21lbnQvRmlsdGVyL21vbWVudCcsIFtdKVxuXG5cdFx0LmZpbHRlcignbW9tZW50JywgWyckbW9tZW50JywgZnVuY3Rpb24gKCRtb21lbnQpIHtcblx0XHRcdHZhciBpc01vbWVudCA9ICRtb21lbnQuaXNNb21lbnQ7XG5cblx0XHRcdHJldHVybiBmdW5jdGlvbiAoaW5wdXQsIGZvcm1hdCkge1xuXHRcdFx0XHRpZighZm9ybWF0KSBmb3JtYXQgPSAnJztcblxuXHRcdFx0XHR2YXIgaXNWYWxpZCA9ICRtb21lbnQoaW5wdXQsIGZvcm1hdCkuaXNWYWxpZCgpO1xuXG5cdFx0XHRcdGlmKCFpc01vbWVudChpbnB1dCkgJiYgIWlzVmFsaWQpIHJldHVybiBpbnB1dDtcblxuXHRcdFx0XHR2YXIgbmV3SW5wdXQgPSAkbW9tZW50KGlucHV0LCBmb3JtYXQpO1xuXG5cdFx0XHRcdGlmKGlzVmFsaWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gbmV3SW5wdXQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIGlucHV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1dKTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCduZ01vbWVudC9TZXJ2aWNlcycsIFtcblx0XHRcdCduZ01vbWVudC9TZXJ2aWNlJ1xuXHRcdF0pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ25nTW9tZW50L0ZpbHRlci9zdWJ0cmFjdCcsIFtdKVxuXG5cdFx0LmZpbHRlcignbW9tZW50U3VidHJhY3QnLCBbJyRtb21lbnQnLCBmdW5jdGlvbiAoJG1vbWVudCkge1xuXHRcdFx0dmFyIGlzTW9tZW50ID0gJG1vbWVudC5pc01vbWVudDtcblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChpbnB1dCwgdHlwZSwgdGltZXMpIHtcblx0XHRcdFx0aWYoIWlzTW9tZW50KGlucHV0KSkgeyByZXR1cm4gaW5wdXQ7IH1cblx0XHRcdFx0aWYoIXR5cGUpIHsgdHlwZSA9ICdkYXlzJzsgfVxuXHRcdFx0XHRpZighdGltZXMpIHsgdGltZXMgPSAxOyB9XG5cblx0XHRcdFx0LyoqXG5cdFx0XHRcdCAqIERlcHJlY2F0aW9uIHdhcm5pbmc6IG1vbWVudCgpLmFkZChwZXJpb2QsIG51bWJlcikgaXMgZGVwcmVjYXRlZC5cblx0XHRcdFx0ICogUGxlYXNlIHVzZSBtb21lbnQoKS5hZGQobnVtYmVyLCBwZXJpb2QpLlxuXHRcdFx0XHQgKi9cblx0XHRcdFx0cmV0dXJuIGlucHV0LnN1YnRyYWN0KHRpbWVzLCB0eXBlKTtcblx0XHRcdH07XG5cdFx0fV0pO1xufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=